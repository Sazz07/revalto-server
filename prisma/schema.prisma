generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id @default(uuid())
  email         String       @unique
  password      String
  role          UserRole
  emailVerified Boolean      @default(false)
  status        UserStatus   @default(ACTIVE)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  admin         Admin?
  regularUser   RegularUser?
  payments      Payment[]
  votes         Vote[]
  comments      Comment[]
  reports       Report[]

  @@map("users")
}

model Admin {
  id            String    @id @default(uuid())
  firstName     String
  middleName    String?
  lastName      String
  fullName      String    @default("")
  email         String    @unique
  profilePhoto  String?
  contactNumber String?
  isDeleted     Boolean   @default(false)
  deletedAt     DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User      @relation(fields: [email], references: [email])
  reviews       Review[]

  @@map("admins")
}

model RegularUser {
  id                 String     @id @default(uuid())
  firstName          String
  middleName         String?
  lastName           String
  fullName           String     @default("")
  email              String     @unique
  profilePhoto       String?
  contactNumber      String?
  address            String?
  isDeleted          Boolean    @default(false)
  deletedAt          DateTime?
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  user               User       @relation(fields: [email], references: [email])
  reviews            Review[]
  favoriteCategories Category[] @relation("UserFavoriteCategories")
  savedReviews       Review[]   @relation("UserSavedReviews")

  @@map("regular_users")
}

model Category {
  id          String        @id @default(uuid())
  name        String        @unique
  icon        String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  reviews     Review[]
  isDeleted   Boolean       @default(false)
  deletedAt   DateTime?
  favoritedBy RegularUser[] @relation("UserFavoriteCategories")

  @@map("categories")
}

model Tag {
  id        String    @id @default(uuid())
  name      String    @unique
  reviews   Review[]  @relation("ReviewTags") // Added relation
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  isDeleted Boolean   @default(false)
  deletedAt DateTime?

  @@map("tags")
}

model Review {
  id               String        @id @default(uuid())
  title            String
  description      String        @db.Text
  rating           Float         @db.DoublePrecision
  purchaseSource   String?
  images           String[]
  viewCount        Int           @default(0)
  uniqueViewers    Int           @default(0)
  isFeatured       Boolean       @default(false)
  helpfulCount     Int           @default(0)
  unhelpfulCount   Int           @default(0)
  categoryId       String
  category         Category      @relation(fields: [categoryId], references: [id])
  status           ReviewStatus  @default(PENDING)
  isPremium        Boolean       @default(false)
  premiumPrice     Float?
  moderationReason String?
  authorId         String?
  adminId          String?
  admin            Admin?        @relation(fields: [adminId], references: [id])
  regularUserId    String?
  regularUser      RegularUser?  @relation(fields: [regularUserId], references: [id])
  votes            Vote[]
  comments         Comment[]
  payments         Payment[]
  reports          Report[]
  tags             Tag[]         @relation("ReviewTags")
  savedBy          RegularUser[] @relation("UserSavedReviews")
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  isDeleted        Boolean       @default(false)
  deletedAt        DateTime?

  @@index([title])
  @@index([categoryId])
  @@index([rating])
  @@index([isPremium])
  @@index([isFeatured])
  @@map("reviews")
}

model Vote {
  id        String    @id @default(uuid())
  type      VoteType
  reviewId  String
  review    Review    @relation(fields: [reviewId], references: [id])
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  isDeleted Boolean   @default(false)
  deletedAt DateTime?

  @@unique([reviewId, userId])
  @@index([reviewId])
  @@map("votes")
}

model Comment {
  id        String    @id @default(uuid())
  content   String    @db.Text
  reviewId  String
  review    Review    @relation(fields: [reviewId], references: [id])
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  parentId  String? // For reply functionality
  parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[] @relation("CommentReplies")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  isDeleted Boolean   @default(false)
  deletedAt DateTime?

  @@index([reviewId])
  @@map("comments")
}

model Payment {
  id                 String        @id @default(uuid())
  amount             Float
  transactionId      String        @unique
  status             PaymentStatus @default(UNPAID)
  paymentGatewayData Json?
  userId             String
  user               User          @relation(fields: [userId], references: [id])
  reviewId           String
  review             Review        @relation(fields: [reviewId], references: [id])
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt

  @@index([userId])
  @@index([reviewId])
  @@map("payments")
}

model Report {
  id        String       @id @default(uuid())
  reason    String
  details   String?      @db.Text
  status    ReportStatus @default(PENDING)
  reviewId  String
  review    Review       @relation(fields: [reviewId], references: [id])
  userId    String
  user      User         @relation(fields: [userId], references: [id])
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  @@index([reviewId])
  @@index([userId])
  @@map("reports")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  USER
}

enum UserStatus {
  ACTIVE
  BLOCKED
  DELETED
}

enum ReviewStatus {
  PENDING
  PUBLISHED
  UNPUBLISHED
}

enum VoteType {
  UPVOTE
  DOWNVOTE
}

enum PaymentStatus {
  PAID
  UNPAID
  REFUNDED
  FAILED
}

enum ReportStatus {
  PENDING
  REVIEWED
  RESOLVED
  DISMISSED
}
